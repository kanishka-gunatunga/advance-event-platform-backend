// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") 
}

model user_sessions {
  sid     String   @id @db.VarChar(255)
  sess    Json
  expire  DateTime

  @@index([expire])
}


model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String?
  user_role  Int
  is_verified  Int?
  otp      String?
  otp_expires_at DateTime?
  status String
  createdAt DateTime @default(now())

  customerDetails CustomerDetails?
  organizationDetails OrganizationDetails?
  venueDetails VenueDetails?
  marketingDetails MarketingDetails?
  artistDetails ArtistDetails?
  adminDetails AdminDetails?
  staffDetails StaffDetails?
  ticketTypes TicketType[]
  instructor Instructor[]
  speaker Speaker[]
  performer Performer[]
  event Event[]
  eventArtists       EventArtist[]  
}


model CustomerDetails {
  id        Int     @id @default(autoincrement())
  user_id     Int   @unique
  first_name  String?
  last_name  String?
  contact_number  String?
  country String?
  gender String?
  dob DateTime?
  address  String?
  city  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
}

model OrganizationDetails {
  id        Int      @id @default(autoincrement())
  user_id     Int   @unique
  organization_name  String?
  contact_number  String?
  country String?
  address  String?
  city  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
}

model VenueDetails {
  id        Int      @id @default(autoincrement())
  user_id     Int   @unique
  venue_name  String?
  contact_number  String?
  country String?
  address  String?
  city  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
}

model MarketingDetails {
  id        Int      @id @default(autoincrement())
  user_id     Int   @unique
  referral_code  String  @unique
  first_name  String?
  last_name  String?
  contact_number  String?
  country String?
  address  String?
  city  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
}

model ArtistDetails {
  id        Int      @id @default(autoincrement())
  user_id     Int   @unique
  artist_name  String?
  contact_number  String?
  country String?
  address  String?
  city  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
}

model AdminDetails {
  id        Int      @id @default(autoincrement())
  user_id     Int   @unique
  name  String?
  phone  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
}

model StaffDetails {
  id        Int      @id @default(autoincrement())
  user_id     Int   @unique
  name  String?
  phone  String?
  createdAt DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id])
}

model TicketType {
  id        Int      @id @default(autoincrement())
  user_id   Int     
  name      String?
  color     String?
  status    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [id])
}

model Instructor {
  id        Int      @id @default(autoincrement())
  user_id   Int     
  name      String?
  description     String?
  status    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [id])
  eventInstructors EventInstructor[]
}

model Speaker {
  id        Int      @id @default(autoincrement())
  user_id   Int     
  name      String?
  description     String?
  status    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [id])
  eventSpeakers EventSpeaker[]
}

model Performer {
  id        Int      @id @default(autoincrement())
  user_id   Int     
  name      String?
  description     String?
  status    String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [id])
  eventPerformers EventPerformer[]
}
model Event {
  id            Int       @id @default(autoincrement())
  user_id       Int  
  event_type          String
  name          String
  slug          String   @unique
  description   String?
  featured_image String?
  trailer_links Json?
  genres Json?
  video_embeds Json?
  status String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [user_id], references: [id])
  eventArtists     EventArtist[]
  eventInstructors     EventInstructor[]
  eventSpeakers     EventSpeaker[]
  eventPerformers     EventPerformer[]
}

model EventArtist {
  id                Int       @id @default(autoincrement())
  event_id          Int
  artist_id         Int?      
  artist_name_manual String?  
  createdAt         DateTime  @default(now())

  event             Event     @relation(fields: [event_id], references: [id])
  artist            User?     @relation(fields: [artist_id], references: [id])
}

model EventInstructor {
  id                Int       @id @default(autoincrement())
  event_id          Int
  instructor_id         Int?       
  createdAt         DateTime  @default(now())

  event             Event     @relation(fields: [event_id], references: [id])
  instructor    Instructor? @relation(fields: [instructor_id], references: [id])
}

model EventPerformer {
  id                Int       @id @default(autoincrement())
  event_id          Int
  performer_id         Int?       
  createdAt         DateTime  @default(now())

  event             Event     @relation(fields: [event_id], references: [id])
  performer    Performer? @relation(fields: [performer_id], references: [id])
}

model EventSpeaker {
  id                Int       @id @default(autoincrement())
  event_id          Int
  speaker_id         Int?       
  createdAt         DateTime  @default(now())

  event             Event     @relation(fields: [event_id], references: [id])
  speaker    Speaker? @relation(fields: [speaker_id], references: [id])
}
model Order {
  id             Int      @id @default(autoincrement())
  email          String
  first_name     String 
  last_name      String
  contact_number String
  nic_passport   String
  country        String
  event_id       String
  user_id        String
  seat_ids       Json?
  tickets_without_seats       Json?
  sub_total      Float
  discount       Float
  total          Float
  status         String
  createdAt DateTime? @default(now())
}


model canceledTicket {
  id             Int      @id @default(autoincrement())
  order_id       Int
  type     String 
  seat_id      String?
  type_id String?
  ticketTypeName   String?
  quantity Float?
  price Float?
  createdAt DateTime? @default(now())
}